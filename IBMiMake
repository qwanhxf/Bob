# Copyright 2017 S4i Systems, Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# This file is a component of Bob, the Better Object Builder for IBM i.  For
# information on how to use it, go to: https://github.com/s4isystems/Bob
#
# This is a generic Makefile to build IBM i objects from source code located in an IFS directory.
# It should be included near the top of a project-specific makefile via the `include` directive, e.g.
#    IBMIMAKE := /Build/Bob/IBMiMake
#    include $(IBMIMAKE)
#
# Note: When using the IFS, path case sensitivity needs to match the actual item
# in the file system or things will break.
#
# To invoke:
#   o ADDLIBLE <object_lib>
#   o CALL QP2TERM
#   o cd /qsys.lib/<object_lib>.lib
#   o make all -f '<location of project-specific makefile>'
#
# Work around for C compiler bug:
#   o ADDLIBLE <object_lib>
#   o CALL QP2TERM
#   o cd /some/path/that's/not/in/QSYS.LIB
#   o make all OBJPATH:=/QSYS.LIB/<object_lib>.LIB -f '/path/to/project-specific/makefile'
#   o Use `--warn-undefined-variables` while testing to see if any variables have been used without being set.
#
# To invoke from a shell:
#   o cd /some/path/that's/not/in/QSYS.LIB
#   o make all OBJPATH:=/QSYS.LIB/<object_lib>.LIB -f '/path/to/project-specific/Makefile'


# These variables are swapped into the compile commands.  Their values also serve as
# global defaults that can be overridden on a per-object basis by setting target-specific
# variables, e.g. `MYPGM.PGM: private TGTRLS = V7R1M0`.  They can also be overridden on a
# per-object-type basis by setting pattern-specific variables, e.g.
# `%.SRVPGM: private ACTGRP = $(SRVPGM_ACTGRP)` (A variable is used in the assignment
# instead of a constant so that all settings are defined in one place, at the top.)
# tl;dr: If you want to customize a compile setting for an object, change these variables
# in your TARGET (not here).
ACTGRP := *NEW
AUT := *EXCLUDE
BNDDIR :=
COMMIT := *NONE
CURLIB :=
DBGVIEW := *ALL
DETAIL := *EXTENDED
DFTACTGRP := *NO
DLTPCT := *NONE
HLPID =
HLPPNLGRP =
OBJTYPE :=
OPTION := *EVENTF
PAGESIZE :=
PGM :=
PMTFILE :=
PRDLIB :=
REUSEDLT := *NO
RPGPPOPT :=
RSTDSP :=
SIZE :=
STGMDL := *SNGLVL
SYSIFCOPT :=
TERASPACE := *YES
TEXT :=
TYPE :=
TGTCCSID := *JOB
TGTRLS := V6R1M0
VLDCKR :=
DEFINES :=
INCDIRS :=
OP := (
CP := )

# Object-type-specific defaults.  Not used directly, but copied to the standard ones above and then
# inserted into the compile commands.  Each variable here should also precede its corresponding pattern
# rule as a pattern-specific variable. Change these to alter compile defaults for an entire type of
# object.
BNDCL_ACTGRP := $(ACTGRP)
BNDCL_AUT := $(AUT)
BNDCL_DBGVIEW := $(DBGVIEW)
BNDCL_DFTACTGRP := $(DFTACTGRP)
BNDCL_OPTION := $(OPTION)
BNDCL_TGTRLS := $(TGTRLS)

BNDRPG_ACTGRP := $(ACTGRP)
BNDRPG_AUT := $(AUT)
BNDRPG_DBGVIEW := $(DBGVIEW)
BNDRPG_DFTACTGRP := $(DFTACTGRP)
BNDRPG_OPTION := $(OPTION)
BNDRPG_TGTRLS := $(TGTRLS)

CMD_AUT := $(AUT)
CMD_HLPID = $*
CMD_HLPPNLGRP = $*
CMD_PGM = $*
CMD_PMTFILE := *NONE
CMD_VLDCKR := *NONE

CMOD_AUT := $(AUT)
CMOD_DBGVIEW := $(DBGVIEW)
CMOD_OPTION := *EVENTF *NOSHOWUSR *XREF *AGR
CMOD_STGMDL := *SNGLVL
CMOD_SYSIFCOPT := *IFS64IO
CMOD_TERASPACE := *YES
CMOD_TGTRLS := $(TGTRLS)
CMOD_DEFINE := $(DEFINES)
CMOD_INCDIR := $(INCDIRS)

CPPMOD_AUT := $(AUT)
CPPMOD_DBGVIEW := $(DBGVIEW)
CPPMOD_OPTION := *RTTIALL
CPPMOD_STGMDL := *SNGLVL
CPPMOD_SYSIFCOPT := *IFS64IO
CPPMOD_TERASPACE := *YES
CPPMOD_TGTRLS := $(TGTRLS)
CPPMOD_DEFINE := $(DEFINES)
CPPMOD_INCDIR := $(INCDIRS)

CLMOD_AUT := $(AUT)
CLMOD_DBGVIEW := $(DBGVIEW)
CLMOD_OPTION := $(OPTION)
CLMOD_TGTRLS := $(TGTRLS)

DSPF_AUT := $(AUT)
DSPF_OPTION := *EVENTF *SRC *LIST
DSPF_RSTDSP := *YES

LF_AUT := $(AUT)
LF_OPTION := *EVENTF *SRC *LIST

MNU_AUT := $(AUT)
MNU_CURLIB := *NOCHG
MNU_OPTION := *EVENTF *SRC
MNU_PRDLIB := *NOCHG
MNU_TYPE :=

PNLGRP_AUT := $(AUT)
PNLGRP_OPTION := *EVENTF *SRC

PF_AUT := $(AUT)
PF_DLTPCT := $(DLTPCT)
PF_OPTION := *EVENTF *SRC *LIST
PF_REUSEDLT := $(REUSEDLT)
PF_SIZE :=

PGM_ACTGRP := *NEW
PGM_AUT := $(AUT)
PGM_DETAIL := $(DETAIL)
PGM_OPTION :=
PGM_STGMDL := *SNGLVL
PGM_TGTRLS := $(TGTRLS)

PRTF_AUT := $(AUT)
PRTF_OPTION := *EVENTF *SRC *LIST
PRTF_PAGESIZE := 66 132

QMQRY_AUT := $(AUT)

RPGMOD_AUT := $(AUT)
RPGMOD_DBGVIEW := $(DBGVIEW)
RPGMOD_OPTION := $(OPTION)
RPGMOD_TGTRLS := $(TGTRLS)

SQLCIMOD_DBGVIEW := *SOURCE
SQLCIMOD_OBJTYPE := *MODULE
SQLCIMOD_OPTION := $(CMOD_OPTION)
SQLCIMOD_STGMDL := $(CMOD_STGMDL)
SQLCIMOD_SYSIFCOPT := $(CMOD_SYSIFCOPT)
SQLCIMOD_TERASPACE := *YES *TSIFC
SQLCIMOD_TGTRLS := $(TGTRLS)

SQLCIPGM_DBGVIEW := *SOURCE
SQLCIPGM_OBJTYPE := *PGM
SQLCIPGM_OPTION := $(OPTION)
SQLCIPGM_TGTRLS := $(TGTRLS)

SQLRPGIMOD_DBGVIEW := *SOURCE
SQLRPGIMOD_OBJTYPE := *MODULE
SQLRPGIMOD_OPTION := $(RPGMOD_OPTION)
SQLRPGIMOD_RPGPPOPT := *LVL2
SQLRPGIMOD_TGTRLS := $(TGTRLS)

SQLRPGIPGM_DBGVIEW := *SOURCE
SQLRPGIPGM_OBJTYPE := *PGM
SQLRPGIPGM_OPTION := $(OPTION)
SQLRPGIPGM_RPGPPOPT := *LVL2
SQLRPGIPGM_TGTRLS := $(TGTRLS)

SRVPGM_ACTGRP := *CALLER
SRVPGM_AUT := $(AUT)
SRVPGM_BNDDIR := *NONE
SRVPGM_DETAIL := *BASIC
SRVPGM_STGMDL := $(STGMDL)
SRVPGM_TGTRLS := $(TGTRLS)

WSCST_AUT := $(AUT)

# Creation command parameters with variables (the ones listed at the top) for the most common ones.
CRTCLMODFLAGS = AUT($(AUT)) DBGVIEW($(DBGVIEW)) OPTION($(OPTION)) TEXT(''$(TEXT)'') TGTRLS($(TGTRLS))
CRTCMDFLAGS = PGM($(PGM)) VLDCKR($(VLDCKR)) PMTFILE($(PMTFILE)) HLPPNLGRP($(HLPPNLGRP)) HLPID($(HLPID)) AUT($(AUT)) TEXT(''$(TEXT)'')
CRTDSPFFLAGS = ENHDSP(*YES) RSTDSP($(RSTDSP)) DFRWRT(*YES) AUT($(AUT)) OPTION($(OPTION)) TEXT(''$(TEXT)'')
CRTLFFLAGS = AUT($(AUT)) OPTION($(OPTION)) TEXT(''$(TEXT)'')
CRTMNUFLAGS = AUT($(AUT)) OPTION($(OPTION)) CURLIB($(CURLIB)) PRDLIB($(PRDLIB)) TEXT(''$(TEXT)'') TYPE($(TYPE))
CRTPFFLAGS = AUT($(AUT)) DLTPCT($(DLTPCT)) OPTION($(OPTION)) REUSEDLT($(REUSEDLT)) SIZE($(SIZE)) TEXT(''$(TEXT)'')
CRTPNLGRPFLAGS = AUT($(AUT)) OPTION($(OPTION)) TEXT(''$(TEXT)'')
CRTPRTFFLAGS = AUT($(AUT)) OPTION($(OPTION)) PAGESIZE($(PAGESIZE)) TEXT(''$(TEXT)'')
CRTRPGMODFLAGS = AUT($(AUT)) DBGVIEW($(DBGVIEW)) OPTION($(OPTION)) OUTPUT(*PRINT) TEXT('$(TEXT)') \
                 TGTRLS($(TGTRLS))
CRTQMQRYFLAGS = AUT($(AUT)) TEXT(''$(TEXT)'')
CRTSQLCIFLAGS = COMMIT($(COMMIT)) OBJTYPE($(OBJTYPE)) OUTPUT(*PRINT) TEXT('$(TEXT)') TGTRLS($(TGTRLS)) DBGVIEW($(DBGVIEW)) \
                COMPILEOPT('INCDIR(''$(SRCPATH)'') OPTION($(OPTION)) STGMDL($(STGMDL)) SYSIFCOPT($(SYSIFCOPT)) \
                            TGTCCSID($(TGTCCSID)) TERASPACE($(TERASPACE)) MAKEDEP(''$(DEPDIR)/$*.Td'')')
CRTSQLRPGIFLAGS = COMMIT($(COMMIT)) OBJTYPE($(OBJTYPE)) OPTION($(OPTION)) OUTPUT(*PRINT) TEXT('$(TEXT)') \
                  TGTRLS($(TGTRLS)) DBGVIEW($(DBGVIEW)) RPGPPOPT($(RPGPPOPT))
CRTWSCSTFLAGS = AUT($(AUT)) TEXT(''$(TEXT)'')

ifeq ($(BUILD),DEBUG)
CRTCMODFLAGS = TERASPACE($(TERASPACE)) STGMDL($(STGMDL)) OUTPUT(*PRINT) OPTION($(OPTION)) DBGVIEW($(DBGVIEW)) \
               SYSIFCOPT($(SYSIFCOPT)) TEXT('$(TEXT)') TGTCCSID($(TGTCCSID)) TGTRLS($(TGTRLS)) \
               MAKEDEP('$(DEPDIR)/$*.Td') INCDIR($(INCDIRS)) DEFINE($(DEFINES)) ENUM(*INT) DTAMDL(*P128)
CRTCPPMODFLAGS = TERASPACE($(TERASPACE)) STGMDL($(STGMDL)) OUTPUT(*PRINT) OPTION($(OPTION)) DBGVIEW($(DBGVIEW)) \
               SYSIFCOPT($(SYSIFCOPT)) TEXT('$(TEXT)') TGTRLS($(TGTRLS)) \
               MAKEDEP('$(DEPDIR)/$*.Td') INCDIR($(INCDIRS)) DEFINE($(DEFINES)) ENUM(*INT)
CRTPGMFLAGS = ACTGRP($(ACTGRP)) TGTRLS($(TGTRLS)) OPTION(*DUPVAR *DUPPROC) STGMDL($(STGMDL)) TEXT('$(TEXT)') IPA('*NO') ALWUPD(*NO)
CRTSRVPGMFLAGS = EXPORT('*ALL') TEXT(''$(TEXT)'') TGTRLS($(TGTRLS)) DETAIL($(DETAIL)) STGMDL($(STGMDL)) \
                 OPTION(*DUPVAR *DUPPROC) IPA('*NO')
else
CRTCMODFLAGS = TERASPACE(*YES *NOTSIFC) STGMDL($(STGMDL)) OUTPUT(*PRINT) DBGVIEW(*NONE) DTAMDL(*P128) INLINE(*ON *AUTO 1024 8192) \
               SYSIFCOPT($(SYSIFCOPT)) TEXT('$(TEXT)') TGTCCSID($(TGTCCSID)) TGTRLS($(TGTRLS)) FLAG(20) ENUM(*INT) \
               MAKEDEP('$(DEPDIR)/$*.Td') OPTIMIZE(40) MODCRTOPT(*KEEPILDTA) INCDIR($(INCDIRS)) DEFINE($(DEFINES)) \
               LICOPT('AlwaysTryToFoliate')
CRTCPPMODFLAGS = TERASPACE(*YES *NOTSIFC) STGMDL($(STGMDL)) OUTPUT(*PRINT) DBGVIEW(*NONE) DTAMDL(*P128) INLINE(*ON *AUTO 1024 8192) \
               SYSIFCOPT($(SYSIFCOPT)) TEXT('$(TEXT)') TGTRLS($(TGTRLS)) FLAG(20) ENUM(*INT) \
               MAKEDEP('$(DEPDIR)/$*.Td') OPTIMIZE(40) MODCRTOPT(*KEEPILDTA) INCDIR($(INCDIRS)) DEFINE($(DEFINES)) \
               LICOPT('AlwaysTryToFoliate')
CRTPGMFLAGS = ACTGRP($(ACTGRP)) TGTRLS($(TGTRLS)) OPTION(*DUPVAR *DUPPROC) STGMDL($(STGMDL)) TEXT('$(TEXT)') IPA('*NO') ALWUPD(*NO)
CRTSRVPGMFLAGS = EXPORT('*ALL') TEXT(''$(TEXT)'') TGTRLS($(TGTRLS)) DETAIL($(DETAIL)) STGMDL($(STGMDL)) \
                 OPTION(*DUPVAR *DUPPROC) IPA('*YES')
endif

# Extra command string for adhoc addition of extra parameters to a creation command.
ADHOCCRTFLAGS =

# Miscellaneous variables
SRCPATH := $(PROJECTDIR)
OBJPATH := $(CURDIR)
override OBJPATH := $(shell echo "$(OBJPATH)" | tr '[:lower:]' '[:upper:]')
OBJLIB := $(basename $(notdir $(OBJPATH)))
LIBL := $(OBJLIB)
SRVPGMLIB := $(OBJLIB)
PGMLIB := $(OBJLIB)
TOOLSPATH := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))
TOOLSLIB := BOBTOOLS
runDate := $(shell date +"%F_%H.%M.%S-%a")
LOGPATH := $(SRCPATH)/Logs/$(runDate)
$(shell mkdir -p $(LOGPATH))
$(info IBMiMake log directory: $(LOGPATH))
DEPDIR := $(SRCPATH)/.deps
$(shell mkdir -p $(DEPDIR) >/dev/null)
CRTFRMSTMFLIB := $(TOOLSLIB)
ICONV := /QOpenSys/usr/bin/iconv
ICONV_EBCDIC := IBM-037
ICONV_ASCII := UTF-8
SETCCSID_ASCII := 1208
VPATH := $(OBJPATH):$(SRCPATH)

# cleanCDeps removes from the CRTCMOD-generated dependency file any header files located in /QIBM/, plus the
# original .C file that is included for some reason, and adds the correct suffix to the target (SO1001 -> SO1001.MODULE).
cleanCDeps = awk '$$2 !~ /^\/QIBM\// && $$2 !~ /$(notdir $<)$$/ && $$2 !~ /$(basename $(notdir $<)).MBR$$/ { sub("^.*/","",$$2); sub("^$*","$@",$$1); print $$1 " " toupper($$2) }'

# This defines the steps taken after a C compile to massage the auto-generated dependencies into a useable form.
# See http://make.mad-scientist.net/papers/advanced-auto-dependency-generation/#tldr
define POSTCCOMPILE =
$(ICONV) -f $(ICONV_EBCDIC) -t $(ICONV_ASCII) $(DEPDIR)/$*.Td | tr -d '\r' > $(DEPDIR)/$*.T2d
$(cleanCDeps) <$(DEPDIR)/$*.T2d | sort -u >$(DEPDIR)/$*.d
touch -cr $(OBJPATH)/$@ $(DEPDIR)/$*.d
rm $(DEPDIR)/$*.Td $(DEPDIR)/$*.T2d
$(removeEmptyDep)
endef

# cleanRPGDeps removes from the CRTRPGMOD- and CRTSQLRPGI-generated events file any system header files
# plus any SQL precompiler-generated source member, and returns what's left.
cleanRPGDeps = awk '$$1 == "FILEID" && $$6 !~ /^QTEMP/ && toupper($$6) !~ /QSYS/ && $$6 !~ /EVFTEMPF0[12]/ && $$6 !~ /$(basename $(notdir $<)).MBR$$/ { print toupper($$6) }'

# This defines the steps taken after an RPG compile to scrape dependencies from the EVFEVENT file and turn them
# into a useable form.
# See http://make.mad-scientist.net/papers/advanced-auto-dependency-generation/#tldr
# In a nutshell, retrieve the flattened list of include files from the EVFEVENT file, then for each one discover
# if any externally-described files are declared.  If so, isolate the actual source file name from its path,
# convert everything to upper case, format in makefile dependency format, and output all these dependencies
# to a file that will be included by Make.
define POSTRPGCOMPILE =
system "CPYTOSTMF FROMMBR('$(OBJPATH)/EVFEVENT.FILE/$*.MBR') TOSTMF('$(DEPDIR)/$*.Td') STMFCCSID(*STDASCII) ENDLINFMT(*LF) CVTDTA(*AUTO) STMFOPT(*REPLACE)" >/dev/null
{ for f in $$($(cleanRPGDeps) <$(DEPDIR)/$*.Td | sort -u); do \
    echo "$${f}"; \
    sed -n -r -e '/^.{6}[^*].{14}[^Ff]/ s/^.{5}[Ff]([^ ]{,10}).*(DISK|WORKSTN|PRINTER).*/  \1\.FILE/I p' -e '/^.{6}[^*]/ s/^.{5}[Dd].*EXTNAME\(([^ \)]*).*/  \1\.FILE/I p' "$${f}" | sort -u; \
  done; \
} | sed -e 's/^\/.*\///' -e 's/^/$@: /' | tr '[:lower:]' '[:upper:]' >$(DEPDIR)/$*.d
touch -cr $(OBJPATH)/$@ $(DEPDIR)/$*.d
rm $(DEPDIR)/$*.Td
$(removeEmptyDep)
endef

# Deletes .d dependency file if it's empty.
define removeEmptyDep =
if [ ! -s $(DEPDIR)/$*.d ]; then \
  rm $(DEPDIR)/$*.d; \
fi
endef

# Commands to generate typedef structure for *FILE objects (for use by C code)
# Create struct via GENCSRC command, then strip out comments and compare with existing struct; only replace existing file if something has changed.
define TYPEDEF_SCRIPT =
if [ "$(suffix $<)" = '.PRTF' ]; then SLTFLD='*OUTPUT'; else SLTFLD='*BOTH *KEY'; fi; system -v "GENCSRC OBJ('$(OBJPATH)/$@') SRCSTMF('$<.TH') SLTFLD($$SLTFLD) TYPEDEFPFX('$(basename $@)')" > /dev/null
(file=$(subst .,_,$(notdir $<))_H; echo "#ifndef $${file}"; echo "   #define $${file}"; $(ICONV) -f $(ICONV_EBCDIC) -t $(ICONV_ASCII) $<.TH | tr -d '\r' | sed -e '/^ *int/ s/;     /;/' -e '/^ *int/ s/int/long int/'; echo "#endif  /* $${file} */") > $<.H1
rm $<.TH
if [ -f "$<.H" ]; then sed -e '/^\/\//d' $<.H >$<.H-old; fi
sed -e '/^\/\//d' $<.H1 >$<.H-new
if ! cmp $<.H-new $<.H-old >/dev/null 2>&1; then mv -f $<.H1 $<.H; echo "*** Created new typedef file $<.H for file [$*]"; fi
if [ -f "$<.H-old" ]; then rm "$<.H-old"; fi
if [ -f "$<.H-new" ]; then rm "$<.H-new"; fi
if [ -f "$<.H1" ]; then rm "$<.H1"; fi
endef

# Can't specify our default ACTGRP value if DFTACTGRP(*YES) is specified.
derive_ACTGRP = $(if $(filter *YES,$(DFTACTGRP)),,$(ACTGRP))

# Insure that the CCSID attribute of a source file matches what we know its encoding to be.  This attribute
# gets reset to a default value each time a file is placed into the IFS.  The attribute must match the actual
# encoding in order for compile commands that support stream files to work.  Only attempt setting IFS files.
define set_STMF_CCSID =
-setccsid $(SETCCSID_ASCII) $(filter-out /QSYS.LIB/%,$(realpath $^))
endef

# These variables allow pattern-specific variables to be used when multiple source patterns exist for one object pattern (like with *FILEs, which can be PFs, LFs, DSPFs, etc.).
# The pattern-specific variable will set itself to a variable below, which will then be evaluated
# from the context of that pattern-matched rule. This can be used to set specific compile parameters
# for each type of, for example, file object (PF, LF, DSPF, etc.).
# The advantage of this approach over simply hard-coding values in the recipe is that individual targets (compiled objects)
# will be able to override these values with their own, thereby overriding these defaults.
# This elaborate construct is to work around a limitation in Make (`%.object: %.source variable=value` does not work; it
# effectively resolves to `%.object: variable=value`).
#
# Determine default settings for the various source types that can make a file object.
fileAUT = $(strip \
	$(if $(filter %.DSPF,$<),$(DSPF_AUT), \
	$(if $(filter %.LF,$<),$(LF_AUT), \
	$(if $(filter %.PF,$<),$(PF_AUT), \
	$(if $(filter %.PRTF,$<),$(PRTF_AUT), \
	UNKNOWN_FILE_TYPE)))))
fileDLTPCT = $(strip \
	$(if $(filter %.PF,$<),$(PF_DLTPCT), \
	UNKNOWN_FILE_TYPE))
fileOPTION = $(strip \
	$(if $(filter %.DSPF,$<),$(DSPF_OPTION), \
	$(if $(filter %.LF,$<),$(LF_OPTION), \
	$(if $(filter %.PF,$<),$(PF_OPTION), \
	$(if $(filter %.PRTF,$<),$(PRTF_OPTION), \
	UNKNOWN_FILE_TYPE)))))
filePAGESIZE = $(strip \
	$(if $(filter %.PRTF,$<),$(PRTF_PAGESIZE), \
	UNKNOWN_FILE_TYPE))
fileREUSEDLT = $(strip \
	$(if $(filter %.PF,$<),$(PF_REUSEDLT), \
	UNKNOWN_FILE_TYPE))
fileRSTDSP = $(strip \
	$(if $(filter %.DSPF,$<),$(DSPF_RSTDSP), \
	UNKNOWN_FILE_TYPE))
fileSIZE = $(strip \
	$(if $(filter %.PF,$<),$(PF_SIZE), \
	UNKNOWN_FILE_TYPE))

# Determine default settings for the various source types that can make a module object.
moduleAUT = $(strip \
	$(if $(filter %.c,$<),$(CMOD_AUT), \
	$(if $(filter %.cpp,$<),$(CPPMOD_AUT), \
	$(if $(filter %.CLLE,$<),$(CLMOD_AUT), \
	$(if $(filter %.RPGLE,$<),$(RPGMOD_AUT), \
	UNKNOWN_FILE_TYPE)))))
moduleDBGVIEW = $(strip \
	$(if $(filter %.c,$<),$(CMOD_DBGVIEW), \
	$(if $(filter %.cpp,$<),$(CPPMOD_DBGVIEW), \
	$(if $(filter %.CLLE,$<),$(CLMOD_DBGVIEW), \
	$(if $(filter %.RPGLE,$<),$(RPGMOD_DBGVIEW), \
	$(if $(filter %.SQLC,$<),$(SQLCIMOD_DBGVIEW), \
	$(if $(filter %.SQLRPGLE,$<),$(SQLRPGIMOD_DBGVIEW), \
	UNKNOWN_FILE_TYPE)))))))
moduleOBJTYPE = $(strip \
	$(if $(filter %.SQLC,$<),$(SQLCIMOD_OBJTYPE), \
	$(if $(filter %.SQLRPGLE,$<),$(SQLRPGIMOD_OBJTYPE), \
	UNKNOWN_FILE_TYPE)))
moduleOPTION = $(strip \
	$(if $(filter %.c,$<),$(CMOD_OPTION), \
	$(if $(filter %.cpp,$<),$(CPPMOD_OPTION), \
	$(if $(filter %.CLLE,$<),$(CLMOD_OPTION), \
	$(if $(filter %.RPGLE,$<),$(RPGMOD_OPTION), \
	$(if $(filter %.SQLC,$<),$(SQLCIMOD_OPTION), \
	$(if $(filter %.SQLRPGLE,$<),$(SQLRPGIMOD_OPTION), \
	UNKNOWN_FILE_TYPE)))))))
moduleRPGPPOPT = $(strip \
	$(if $(filter %.SQLRPGLE,$<),$(SQLRPGIMOD_RPGPPOPT), \
	UNKNOWN_FILE_TYPE))
moduleSTGMDL = $(strip \
	$(if $(filter %.c,$<),$(CMOD_STGMDL), \
	$(if $(filter %.cpp,$<),$(CPPMOD_STGMDL), \
	$(if $(filter %.SQLC,$<),$(SQLCIMOD_STGMDL), \
	UNKNOWN_FILE_TYPE))))
moduleSYSIFCOPT = $(strip \
	$(if $(filter %.c,$<),$(CMOD_SYSIFCOPT), \
	$(if $(filter %.cpp,$<),$(CPPMOD_SYSIFCOPT), \
	$(if $(filter %.SQLC,$<),$(SQLCIMOD_SYSIFCOPT), \
	UNKNOWN_FILE_TYPE))))
moduleTERASPACE = $(strip \
	$(if $(filter %.c,$<),$(CMOD_TERASPACE), \
	$(if $(filter %.cpp,$<),$(CPPMOD_TERASPACE), \
	$(if $(filter %.SQLC,$<),$(SQLCIMOD_TERASPACE), \
	UNKNOWN_FILE_TYPE))))
moduleTGTRLS = $(strip \
	$(if $(filter %.c,$<),$(CMOD_TGTRLS), \
	$(if $(filter %.cpp,$<),$(CPPMOD_TGTRLS), \
	$(if $(filter %.CLLE,$<),$(CLMOD_TGTRLS), \
	$(if $(filter %.RPGLE,$<),$(RPGMOD_TGTRLS), \
	$(if $(filter %.SQLC,$<),$(SQLCIMOD_TGTRLS), \
	$(if $(filter %.SQLRPGLE,$<),$(SQLRPGIMOD_TGTRLS), \
	UNKNOWN_FILE_TYPE)))))))
moduleDEFINE = $(strip \
    $(if $(filter %.c,$<),$(CMOD_DEFINE), \
    $(if $(filter %.cpp,$<),$(CPPMOD_DEFINE), \
	UNKNOWN_FILE_TYPE)))
moduleINCDIR = $(strip \
    $(if $(filter %.c,$<),$(CMOD_INCDIR), \
    $(if $(filter %.cpp,$<),$(CPPMOD_INCDIR), \
	UNKNOWN_FILE_TYPE)))

# Determine default settings for the various source types that can make a program object.
programACTGRP = $(strip \
	$(if $(filter %.CLLE,$<),$(BNDCL_ACTGRP), \
	$(if $(filter %.RPGLE,$<),$(BNDRPG_ACTGRP), \
	$(if $(filter %.MODULE,$<),$(PGM_ACTGRP), \
	UNKNOWN_FILE_TYPE))))
programAUT = $(strip \
	$(if $(filter %.CLLE,$<),$(BNDCL_AUT), \
	$(if $(filter %.RPGLE,$<),$(BNDRPG_AUT), \
	$(if $(filter %.MODULE,$<),$(PGM_AUT), \
	UNKNOWN_FILE_TYPE))))
programDBGVIEW = $(strip \
	$(if $(filter %.CLLE,$<),$(BNDCL_DBGVIEW), \
	$(if $(filter %.RPGLE,$<),$(BNDRPG_DBGVIEW), \
	$(if $(filter %.SQLC,$<),$(SQLCIPGM_DBGVIEW), \
	$(if $(filter %.SQLRPGLE,$<),$(SQLRPGIPGM_DBGVIEW), \
	UNKNOWN_FILE_TYPE)))))
programDETAIL = $(strip \
	$(if $(filter %.MODULE,$<),$(PGM_DETAIL), \
	UNKNOWN_FILE_TYPE))
programDFTACTGRP = $(strip \
	$(if $(filter %.CLLE,$<),$(BNDCL_DFTACTGRP), \
	$(if $(filter %.RPGLE,$<),$(BNDRPG_DFTACTGRP), \
	UNKNOWN_FILE_TYPE)))
programOBJTYPE = $(strip \
	$(if $(filter %.SQLC,$<),$(SQLCIPGM_OBJTYPE), \
	$(if $(filter %.SQLRPGLE,$<),$(SQLRPGIPGM_OBJTYPE), \
	UNKNOWN_FILE_TYPE)))
programOPTION = $(strip \
	$(if $(filter %.CLLE,$<),$(BNDCL_OPTION), \
	$(if $(filter %.RPGLE,$<),$(BNDRPG_OPTION), \
	$(if $(filter %.SQLC,$<),$(SQLCIPGM_OPTION), \
	$(if $(filter %.SQLRPGLE,$<),$(SQLRPGIPGM_OPTION), \
	$(if $(filter %.MODULE,$<),$(PGM_OPTION), \
	UNKNOWN_FILE_TYPE))))))
programRPGPPOPT = $(strip \
	$(if $(filter %.SQLRPGLE,$<),$(SQLRPGIPGM_RPGPPOPT), \
	UNKNOWN_FILE_TYPE))
programSTGMDL = $(strip \
	$(if $(filter %.MODULE,$<),$(PGM_STGMDL), \
	UNKNOWN_FILE_TYPE))
programTGTRLS = $(strip \
	$(if $(filter %.CLLE,$<),$(BNDCL_TGTRLS), \
	$(if $(filter %.RPGLE,$<),$(BNDRPG_TGTRLS), \
	$(if $(filter %.SQLC,$<),$(SQLCIPGM_TGTRLS), \
	$(if $(filter %.SQLRPGLE,$<),$(SQLRPGIPGM_TGTRLS), \
	$(if $(filter %.MODULE,$<),$(PGM_TGTRLS), \
	UNKNOWN_FILE_TYPE))))))

### Implicit rules
%.CMD: private AUT = $(CMD_AUT)
%.CMD: private HLPID = $(CMD_HLPID)
%.CMD: private HLPPNLGRP = $(CMD_HLPPNLGRP)
%.CMD: private PGM = $(CMD_PGM)
%.CMD: private PMTFILE = $(CMD_PMTFILE)
%.CMD: private VLDCKR = $(CMD_VLDCKR)
%.CMD: %.CMDSRC
	@echo "*** Creating command [$*]"
	@$(set_STMF_CCSID)
	$(eval crtcmd := $(CRTFRMSTMFLIB)/crtfrmstmf obj($(OBJLIB)/$*) cmd(CRTCMD) srcstmf('$<') parms('$(CRTCMDFLAGS)'))
	@system -v "$(TOOLSLIB)/EXECWLIBS LIB($(LIBL)) CMD($(crtcmd))" > $(LOGPATH)/$(notdir $<).log 2>&1


%.FILE: private AUT = $(fileAUT)
%.FILE: private DLTPCT = $(fileDLTPCT)
%.FILE: private OPTION = $(fileOPTION)
%.FILE: private PAGESIZE = $(filePAGESIZE)
%.FILE: private REUSEDLT = $(fileREUSEDLT)
%.FILE: private RSTDSP = $(fileRSTDSP)
%.FILE: private SIZE = $(fileSIZE)
%.FILE: private TYPEDEF = $(if $(filter YES,$(CREATE_TYPEDEF)),$(TYPEDEF_SCRIPT),)

%.FILE: %.DSPF
	@echo "*** Creating DSPF [$*]"
	@$(set_STMF_CCSID)
	$(eval crtcmd := $(CRTFRMSTMFLIB)/crtfrmstmf obj($(OBJLIB)/$*) cmd(CRTDSPF) srcstmf('$<') parms('$(CRTDSPFFLAGS)'))
	@system -v "$(TOOLSLIB)/EXECWLIBS LIB($(LIBL)) CMD($(crtcmd))" > $(LOGPATH)/$(notdir $<).log

%.FILE: %.LF
	@echo "*** Creating LF [$*]"
	@$(set_STMF_CCSID)
	@if [ -d $(OBJPATH)/$@ ]; then rm -r $(OBJPATH)/$@; fi
	$(eval crtcmd := $(CRTFRMSTMFLIB)/crtfrmstmf obj($(OBJLIB)/$*) cmd(CRTLF) srcstmf('$<') parms('$(CRTLFFLAGS)'))
	@system -v "$(TOOLSLIB)/EXECWLIBS LIB($(LIBL)) CMD($(crtcmd))" > $(LOGPATH)/$(notdir $<).log
	@$(TYPEDEF)

%.FILE: %.PF
	@echo "*** Creating PF [$*]"
	@$(set_STMF_CCSID)
	@$(TOOLSPATH)/dltpfdeps -p $* $(OBJLIB)
	$(eval crtcmd := $(CRTFRMSTMFLIB)/crtfrmstmf obj($(OBJLIB)/$*) cmd(CRTPF) srcstmf('$<') parms('$(CRTPFFLAGS)'))
	@system -v "$(TOOLSLIB)/EXECWLIBS LIB($(LIBL)) CMD($(crtcmd))" > $(LOGPATH)/$(notdir $<).log
	@$(TYPEDEF)


%.FILE: %.PRTF
	@echo "*** Creating PRTF [$*]"
	@$(set_STMF_CCSID)
	$(eval crtcmd := $(CRTFRMSTMFLIB)/crtfrmstmf obj($(OBJLIB)/$*) cmd(CRTPRTF) srcstmf('$<') parms('$(CRTPRTFFLAGS)'))
	@system -v "$(TOOLSLIB)/EXECWLIBS LIB($(LIBL)) CMD($(crtcmd))" > $(LOGPATH)/$(notdir $<).log
	@$(TYPEDEF)


%.MENU: private AUT = $(MNU_AUT)
%.MENU: private OPTION = $(MNU_OPTION)
%.MENU: private CURLIB = $(MNU_CURLIB)
%.MENU: private PRDLIB = $(MNU_PRDLIB)
%.MENU: private TYPE = $(MNU_TYPE)
%.MENU: %.MENUSRC
	@echo "*** Creating menu [$*]"
	@$(set_STMF_CCSID)
	$(eval crtcmd := $(CRTFRMSTMFLIB)/crtfrmstmf obj($(OBJLIB)/$*) cmd(CRTMNU) srcstmf('$<') parms('$(CRTMNUFLAGS)'))
	@system -v "$(TOOLSLIB)/EXECWLIBS LIB($(LIBL)) CMD($(crtcmd))" > $(LOGPATH)/$(notdir $<).log 2>&1


%.MODULE: private AUT = $(moduleAUT)
%.MODULE: private DBGVIEW = $(moduleDBGVIEW)
%.MODULE: private OBJTYPE = $(moduleOBJTYPE)
%.MODULE: private OPTION = $(moduleOPTION)
%.MODULE: private RPGPPOPT = $(moduleRPGPPOPT)
%.MODULE: private STGMDL = $(moduleSTGMDL)
%.MODULE: private SYSIFCOPT = $(moduleSYSIFCOPT)
%.MODULE: private TERASPACE = $(moduleTERASPACE)
%.MODULE: private TGTRLS = $(moduleTGTRLS)
%.MODULE: private DEFINES = $(moduleDEFINE)
%.MODULE: private INCDIRS = $(moduleINCDIR)

%.MODULE: %.c $(DEPDIR)/%.d
	@echo "*** Creating c module [$*]"
	@$(set_STMF_CCSID)
	$(eval crtcmd := crtcmod module($(OBJLIB)/$*) srcstmf('$<') $(CRTCMODFLAGS) $(ADHOCCRTFLAGS))
	@system -v "$(TOOLSLIB)/EXECWLIBS LIB($(LIBL)) CMD($(crtcmd))" >$(LOGPATH)/$(notdir $<).log 2>&1 || (ret=$$?; rm $(DEPDIR)/$*.Td 2>/dev/null; exit $$ret)
	@$(POSTCCOMPILE)

%.MODULE: %.cpp $(DEPDIR)/%.d
	@echo "*** Creating cpp module [$*]"
	@$(set_STMF_CCSID)
	$(eval crtcmd := crtcppmod module($(OBJLIB)/$*) srcstmf('$<') $(CRTCPPMODFLAGS) $(ADHOCCRTFLAGS))
	@system -v "$(TOOLSLIB)/EXECWLIBS LIB($(LIBL)) CMD($(crtcmd))" >$(LOGPATH)/$(notdir $<).log 2>&1 || (ret=$$?; rm $(DEPDIR)/$*.Td 2>/dev/null; exit $$ret)
	@$(POSTCCOMPILE)

%.MODULE: %.CLLE
	@echo "*** Creating CL module [$*]"
	@$(set_STMF_CCSID)
	$(eval crtcmd := $(CRTFRMSTMFLIB)/crtfrmstmf obj($(OBJLIB)/$*) cmd(CRTCLMOD) srcstmf('$<') parms('$(CRTCLMODFLAGS)'))
	@system -v "$(TOOLSLIB)/EXECWLIBS LIB($(LIBL)) CMD($(crtcmd))" > $(LOGPATH)/$(notdir $<).log 2>&1

%.MODULE: %.RPGLE $(DEPDIR)/%.d
	@echo "*** Creating RPG module [$*]"
	@$(set_STMF_CCSID)
	$(eval crtcmd := crtrpgmod module($(OBJLIB)/$*) srcstmf('$<') $(CRTRPGMODFLAGS))
	@system -v "$(TOOLSLIB)/EXECWLIBS LIB($(LIBL)) CMD($(crtcmd))" > $(LOGPATH)/$(notdir $<).log
	@$(POSTRPGCOMPILE)

# Temp: Convert UTF-8 to temporary Windows Latin-1, because SQLC pre-compiler doesn't understand UTF-8
%.MODULE: %.SQLC $(DEPDIR)/%.d
	@echo "*** Creating SQLC module [$*]"
	@$(set_STMF_CCSID)
	@qsh_out -c "touch -C 1252 $<-1252 && cat $< >$<-1252"
	$(eval crtcmd := crtsqlci obj($(OBJLIB)/$*) srcstmf('$<-1252') $(CRTSQLCIFLAGS))
	@system -v "$(TOOLSLIB)/EXECWLIBS LIB($(LIBL)) CMD($(crtcmd))" >$(LOGPATH)/$(notdir $<).log 2>&1 || (ret=$$?; rm $(DEPDIR)/$*.Td 2>/dev/null; rm "$<-1252" 2>/dev/null; exit $$ret)
	@$(POSTCCOMPILE)
	@rm "$<-1252"

%.MODULE: %.SQLRPGLE $(DEPDIR)/%.d
	@echo "*** Creating SQLRPGLE module [$*]"
	@$(set_STMF_CCSID)
	$(eval crtcmd := crtsqlrpgi obj($(OBJLIB)/$*) srcstmf('$<') $(CRTSQLRPGIFLAGS))
	@system -v "$(TOOLSLIB)/EXECWLIBS LIB($(LIBL)) CMD($(crtcmd))" >$(LOGPATH)/$(notdir $<).log 2>&1
	@$(POSTRPGCOMPILE)


%.PGM: private ACTGRP = $(programACTGRP)
%.PGM: private AUT = $(programAUT)
%.PGM: private DBGVIEW = $(programDBGVIEW)
%.PGM: private DETAIL = $(programDETAIL)
%.PGM: private DFTACTGRP = $(programDFTACTGRP)
%.PGM: private OBJTYPE = $(programOBJTYPE)
%.PGM: private OPTION = $(programOPTION)
%.PGM: private RPGPPOPT = $(programRPGPPOPT)
###%.PGM: private PGM = $*
%.PGM: private STGMDL = $(programSTGMDL)
%.PGM: private TGTRLS = $(programTGTRLS)

%.PGM:
	@echo "*** Creating program [$*] from modules [$(basename $(filter %.MODULE,$(notdir $^)))] and service programs [$(basename $(filter %.SRVPGM,$(notdir $^$|)))]"
	$(eval externalsrvpgms := $(basename $(filter %.SRVPGM,$(subst .LIB,,$(subst /QSYS.LIB/,,$|)))))
	$(eval crtcmd := crtpgm pgm($(PGMLIB)/$*) module($(addprefix $(OBJLIB)/,$(basename $(filter %.MODULE,$(notdir $^))))) BNDSRVPGM($(addsuffix $(CP),$(addprefix $(OP),$(basename $(filter %.SRVPGM,$^)))) $(externalsrvpgms)) $(CRTPGMFLAGS))
	@system -v "$(TOOLSLIB)/EXECWLIBS LIB($(SRVPGMLIB)) CMD($(crtcmd))" >$(LOGPATH)/$@.log 2>&1


%.PNLGRP: private AUT = $(PNLGRP_AUT)
%.PNLGRP: private OPTION = $(PNLGRP_OPTION)
%.PNLGRP: %.PNLGRPSRC
	@echo "*** Creating panel group [$*]"
	@$(set_STMF_CCSID)
	$(eval crtcmd := $(CRTFRMSTMFLIB)/crtfrmstmf obj($(OBJLIB)/$*) cmd(CRTPNLGRP) srcstmf('$<') parms('$(CRTPNLGRPFLAGS)'))
	@system -v "$(TOOLSLIB)/EXECWLIBS LIB($(LIBL)) CMD($(crtcmd))" > $(LOGPATH)/$(notdir $<).log 2>&1


%.QMQRY: private AUT = $(QMQRY_AUT)
%.QMQRY: %.SQL
	@echo "*** Creating QM query [$*]"
	@$(set_STMF_CCSID)
	$(eval crtcmd := $(CRTFRMSTMFLIB)/crtfrmstmf obj($(OBJLIB)/$*) cmd(CRTQMQRY) srcstmf('$<') parms('$(CRTQMQRYFLAGS)'))
	@system -v "$(TOOLSLIB)/EXECWLIBS LIB($(LIBL)) CMD($(crtcmd))" > $(LOGPATH)/$(notdir $<).log 2>&1


%.SRVPGM: private ACTGRP = $(SRVPGM_ACTGRP)
%.SRVPGM: private AUT = $(SRVPGM_AUT)
%.SRVPGM: private DETAIL = $(SRVPGM_DETAIL)
%.SRVPGM: private STGMDL = $(SRVPGM_STGMDL)
%.SRVPGM: private TGTRLS = $(SRVPGM_TGTRLS)
%.SRVPGM:
	@echo "*** Creating service program [$*] from modules [$(basename $(filter %.MODULE,$(notdir $^)))] and service programs [$(basename $(filter %.SRVPGM,$(notdir $^$|)))]"
	$(eval externalsrvpgms := $(basename $(filter %.SRVPGM,$(subst .LIB,,$(subst /QSYS.LIB/,,$|)))))
	$(eval crtcmd := crtsrvpgm srvpgm($(SRVPGMLIB)/$*) module($(addprefix $(OBJLIB)/,$(basename $(filter %.MODULE,$(notdir $^))))) BNDSRVPGM($(addsuffix $(CP),$(addprefix $(OP),$(basename $(filter %.SRVPGM,$^)))) $(externalsrvpgms)) $(CRTSRVPGMFLAGS))
	@system -v "$(TOOLSLIB)/EXECWLIBS LIB($(SRVPGMLIB)) CMD($(crtcmd))" > $(LOGPATH)/$@.log 2>&1

%.SRVPGMALL: private ACTGRP = $(SRVPGM_ACTGRP)
%.SRVPGMALL: private AUT = $(SRVPGM_AUT)
%.SRVPGMALL: private DETAIL = $(SRVPGM_DETAIL)
%.SRVPGMALL: private STGMDL = $(SRVPGM_STGMDL)
%.SRVPGMALL: private TGTRLS = $(SRVPGM_TGTRLS)
%.SRVPGMALL:
	@echo "*** Creating service program [$*] from modules [all] and service programs [$(basename $(filter %.SRVPGM,$(notdir $^$|)))]"
	$(eval externalsrvpgms := $(basename $(filter %.SRVPGM,$(subst .LIB,,$(subst /QSYS.LIB/,,$|)))))
	$(eval crtcmd := crtsrvpgm srvpgm($(SRVPGMLIB)/$*) module($(OBJLIB)/*ALL) BNDSRVPGM($(addsuffix $(CP),$(addprefix $(OP),$(basename $(filter %.SRVPGM,$^)))) $(externalsrvpgms)) $(CRTSRVPGMFLAGS))
	@system -v "$(TOOLSLIB)/EXECWLIBS LIB($(SRVPGMLIB)) CMD($(crtcmd))" > $(LOGPATH)/$@.log 2>&1


%.WSCST: private AUT = $(WSCST_AUT)
%.WSCST: %.WSCSTSRC
	@echo "*** Creating work station customizing object [$*]"
	@$(set_STMF_CCSID)
	$(eval crtcmd := $(CRTFRMSTMFLIB)/crtfrmstmf obj($(OBJLIB)/$*) cmd(CRTWSCST) srcstmf('$<') parms('$(CRTWSCSTFLAGS)'))
	@system -v "$(TOOLSLIB)/EXECWLIBS LIB($(LIBL)) CMD($(crtcmd))" > $(LOGPATH)/$(notdir $<).log 2>&1

$(DEPDIR)/%.d: ;
.PRECIOUS: $(DEPDIR)/%.d

# The *.rebuild file is used as a way of controlling the rebuild of items whose
# rebuild scripts are external to Make.
# Example: 
#    THIRDPARTY.SRVPGM: $(DEPDIR)/THIRDPARTY.SRVPGM.rebuild
#        build_thirdparty.sh
#    MYPGM.PGM: MYPGM.MODULE THIRDPARTY.SRVPGM
# 'THIRDPARTY.SRVPGM' is built outside of our Makefile, so Make has no way of knowing
# when its source code has changed and it should be recompiled.  If we
# executed the recipe every time, it would cause all items dependent on it to
# also be rebuilt.  By making the 3rd-party item dependent on this dummy .rebuild
# file, we can cause its recipe to normally not run, and we can force its recipe
# to run by manually `touch`ing its .rebuild file.
# The following rule causes the initial .rebuild file to be automatically created.
$(DEPDIR)/%.rebuild:
	@touch $@

.PHONY: make_pre
make_pre:
	@echo "*** Creating lib: $(OBJLIB)"
	@system -v "CRTLIB LIB($(OBJLIB))" || true
	@echo "*** Creating lib: $(SRVPGMLIB)"
	@system -v "CRTLIB LIB($(SRVPGMLIB))" || true
	@echo "*** Creating lib: $(PGMLIB)"
	@system -v "CRTLIB LIB($(PGMLIB))" || true
	@system -v "ADDLIBLE LIB($(OBJLIB)) POSITION(*FIRST)"

.PHONY: make_post
make_post:
	@echo "\n\n***"
	@echo "*** Source directory:\t$(SRCPATH)"
	@echo "*** Target library:\t$(OBJLIB)"
	@echo "*** Compile listings:\t$(LOGPATH)"
	@echo "*** Target srvpgm library:\t$(SRVPGMLIB)"
	@echo "*** Target pgm library:\t$(PGMLIB)"
	@echo "***"
	@echo "***           * * * * *   B u i l d   S u c c e s s f u l !   * * * * *"


.PHONY: version
version: ; @echo "Make version: $(MAKE_VERSION)"


.PHONY: test
test:
	@echo "SHELL:			$(SHELL)"; \
	echo ".SHELLFLAGS:		$(.SHELLFLAGS)"; \
	echo "CURDIR:			$(CURDIR)"; \
	echo "SRCPATH:		$(SRCPATH)"; \
	echo "DEPDIR:			$(DEPDIR)"; \
	echo "OBJPATH:		$(OBJPATH)"; \
	echo "OBJLIB:			$(OBJLIB)"; \
	echo "LIBL:				$(LIBL)"; \
	echo "CRTFRMSTFMLIB:		$(CRTFRMSTMFLIB)"; \
	echo "TOOLSPATH:		$(TOOLSPATH)"; \
	echo "PROJECTDIR:		$(PROJECTDIR)";

### Uncomment and add the following to the END of each project-specific makefile.
# Include all auto-generated source dependency files. Since we don't have a list of source files,
# we have to grab everything in the `$DEPDIR` directory.
#-include $(wildcard $(DEPDIR)/*.d)